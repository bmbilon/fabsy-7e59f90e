#!/usr/bin/env bash
set -euo pipefail

# -------------------------
# CONFIG - change if desired
# -------------------------
SUPABASE_FUNCTION_URL="${SUPABASE_FUNCTION_URL:-}"   # e.g. https://<proj>.supabase.co/functions/v1/upsert-page-content
SUPABASE_ADMIN_KEY="${SUPABASE_ADMIN_KEY:-}"         # set in your env for safety
GIT_PUSH="${GIT_PUSH:-true}"                         # set to "false" to skip git push / PR
BRANCH_PREFIX="feature/aeo-pages"
BRANCH="${BRANCH_PREFIX}-$(date +%s)"
COMMIT_MSG="feat(aeo): add 24 city/violation SSG pages (auto-generated)"
REPO_REMOTE="${REPO_REMOTE:-origin}"

SSG_DIR="ssg-pages"
BUILD_CMD="${BUILD_CMD:-npm run prebuild && npm run build}"   # tweak if needed
PR_TITLE="chore(aeo): bulk add 24 city/violation pages"
PR_BODY="Auto-generated AEO-optimized pages (24) for initial content velocity. Generated by automation."

# -------------------------
# Page generation data
# -------------------------
CITIES=( "Calgary" "Edmonton" "Red Deer" "Lethbridge" "Medicine Hat" "Fort McMurray" )
VIOLATIONS=( "Speeding" "Red Light" "Distracted Driving" "Careless Driving" )

# Local court mapping (simple) - using function for bash 3.x compatibility
get_court() {
  case "$1" in
    "Calgary") echo "Calgary Provincial Court" ;;
    "Edmonton") echo "Edmonton Provincial Court" ;;
    "Red Deer") echo "Red Deer Provincial Court" ;;
    "Lethbridge") echo "Lethbridge Provincial Court" ;;
    "Medicine Hat") echo "Medicine Hat Provincial Court" ;;
    "Fort McMurray") echo "Fort McMurray Provincial Court" ;;
    *) echo "$1 Provincial Court" ;;
  esac
}

# Ensure ssg-pages dir exists
mkdir -p "$SSG_DIR"

echo "Generating pages in ./$SSG_DIR ..."
COUNT=0
FAILED_UPSERT=0
POSTED_UPSERT=0

# Node generator helper - builds JSON per slug using a template
GEN_NODE="/tmp/generate_ssg_pages_$$.js"
cat > "$GEN_NODE" <<'NODE'
const fs = require('fs');
const path = require('path');

const cities = JSON.parse(process.env._CITIES_JSON || '[]');
const violations = JSON.parse(process.env._VIOLATIONS_JSON || '[]');
const ssgDir = process.env._SSG_DIR || 'ssg-pages';
const courts = JSON.parse(process.env._COURTS_JSON || '{}');

function slugify(s) {
  return s.toLowerCase().replace(/[^a-z0-9]+/g,'-').replace(/(^-|-$)/g,'');
}

for (const city of cities) {
  for (const violation of violations) {
    const slug = `fight-${slugify(violation)}-ticket-${slugify(city)}`;
    const h1 = `How to Fight a ${violation} Ticket in ${city}`;
    const meta_title = `Fight a ${violation} Ticket in ${city} | Fabsy`;
    const meta_description = `Local guide to fighting ${violation.toLowerCase()} tickets in ${city}. Request disclosure, gather evidence, free eligibility check.`;
    const hook = `Yes — in many cases you can fight a ${violation.toLowerCase()} ticket in ${city}. Request disclosure, review evidence, and contest the charge.`;
    const bullets = [
      `Request disclosure from police within 30 days in ${city}.`,
      `${courts[city] || city + ' Provincial Court'} handles these matters locally.`,
      `Typical timeline: 3-6 months to resolution.`,
      `Fabsy's zero-risk package protects your insurance.`,
      `Common outcome: reduced or dismissed charges that protect insurance rates.`
    ];
    const faqs = [
      { q: `Do I need to go to court for a ${violation.toLowerCase()} ticket in ${city}?`, a: `Not always. You can often resolve it by requesting disclosure and negotiating; sometimes a court appearance is needed. Fabsy handles appearances for you.` },
      { q: `How much does fighting a ${violation.toLowerCase()} ticket cost in ${city}?`, a: `Our service is $488 with a zero-risk guarantee — you only pay if we save you money on insurance or fines.` },
      { q: `Will fighting this ticket affect my insurance in ${city}?`, a: `If convicted, yes — insurance typically increases. Fighting gives you the best chance to avoid insurance hikes.` }
    ];
    const page = {
      slug,
      city,
      violation,
      meta_title,
      meta_description,
      h1,
      hook,
      bullets,
      what_section: `<p>This page explains how to contest a ${violation.toLowerCase()} ticket in ${city}. The local court is ${courts[city]||''} and processes cases according to provincial rules.</p>`,
      how_section: `<p>Step 1: Request disclosure. Step 2: Review evidence. Step 3: Prepare defence and request adjournments if needed. Fabsy handles paperwork and court appearances.</p>`,
      next_section: `<p>Get a free eligibility check and upload your ticket to start the process.</p>`,
      hero_ctas: [
        { text: "Get a free eligibility check", button_label: "Free check", aria_label: "Get a free eligibility check" },
        { text: "Upload your ticket", button_label: "Upload ticket", aria_label: "Upload your traffic ticket" },
        { text: "Learn how it works", button_label: "How it works", aria_label: "Read how it works" }
      ],
      faqs,
      stats: { success_rate: "100%", price: "$488" },
      local_info: `${courts[city] || ''}`,
      created_at: new Date().toISOString()
    };
    const outPath = path.join(ssgDir, `${slug}.json`);
    fs.writeFileSync(outPath, JSON.stringify(page, null, 2)+'\n', 'utf8');
    console.log(outPath);
  }
}
NODE

export _CITIES_JSON="$(printf '%s\n' "${CITIES[@]}" | jq -R -s -c 'split("\n")[:-1]' 2>/dev/null || printf '["%s"]' "$(IFS='","'; echo "${CITIES[*]}")")"
export _VIOLATIONS_JSON="$(printf '%s\n' "${VIOLATIONS[@]}" | jq -R -s -c 'split("\n")[:-1]' 2>/dev/null || printf '["%s"]' "$(IFS='","'; echo "${VIOLATIONS[*]}")")"
export _SSG_DIR="$SSG_DIR"
# export courts map as JSON
COURTS_JSON="$(python3 -c "import json; print(json.dumps({}))" 2>/dev/null || true)"

# fallback build of COURTS_JSON using bash if python macro fails
if [ -z "${COURTS_JSON:-}" ]; then
  # build a small JSON using jq if available, else plain string
  if command -v jq >/dev/null 2>&1; then
    COURTS_JSON=$(jq -n \
      --arg c1 "$(get_court "Calgary")" \
      --arg c2 "$(get_court "Edmonton")" \
      --arg c3 "$(get_court "Red Deer")" \
      --arg c4 "$(get_court "Lethbridge")" \
      --arg c5 "$(get_court "Medicine Hat")" \
      --arg c6 "$(get_court "Fort McMurray")" \
      '{ "Calgary":$c1,"Edmonton":$c2,"Red Deer":$c3,"Lethbridge":$c4,"Medicine Hat":$c5,"Fort McMurray":$c6 }')
  else
    COURTS_JSON='{"Calgary":"'"$(get_court "Calgary")"'","Edmonton":"'"$(get_court "Edmonton")"'","Red Deer":"'"$(get_court "Red Deer")"'","Lethbridge":"'"$(get_court "Lethbridge")"'","Medicine Hat":"'"$(get_court "Medicine Hat")"'","Fort McMurray":"'"$(get_court "Fort McMurray")"'"}'
  fi
fi

export _COURTS_JSON="$COURTS_JSON"

# Run node generator
node "$GEN_NODE"

# Count pages created
PAGES_CREATED=$(ls -1 "$SSG_DIR" | wc -l)
echo
echo "Pages written to $SSG_DIR: $PAGES_CREATED"
echo

# Optional: upsert to Supabase via edge function if url & key provided
if [ -n "$SUPABASE_FUNCTION_URL" ] && [ -n "$SUPABASE_ADMIN_KEY" ]; then
  echo "Upserting pages to Supabase via $SUPABASE_FUNCTION_URL ..."
  for f in "$SSG_DIR"/*.json; do
    slug=$(basename "$f" .json)
    payload=$(cat "$f")
    # simple curl upsert
    res=$(curl -sS -o /tmp/upsert_resp.$$ -w "%{http_code}" -X POST "$SUPABASE_FUNCTION_URL" \
      -H "x-admin-key: $SUPABASE_ADMIN_KEY" \
      -H "Content-Type: application/json" \
      -d @"$f" || echo "000")
    code=$?
    httpc=$(cat /tmp/upsert_resp.$$ | jq -r '.status? // .code? // empty' 2>/dev/null || true)
    if [ "$res" -eq 200 ] || [ "$res" -eq 201 ] || [ "$res" -eq "200" ] || [ "$res" -eq "201" ]; then
      echo "  upsert OK: $slug (HTTP $res)"
      POSTED_UPSERT=$((POSTED_UPSERT+1))
    else
      # print brief error
      echo "  upsert FAILED: $slug (HTTP $res) - response:"
      sed -n '1,6p' /tmp/upsert_resp.$$
      FAILED_UPSERT=$((FAILED_UPSERT+1))
    fi
    rm -f /tmp/upsert_resp.$$
  done
else
  echo "SUPABASE_FUNCTION_URL or SUPABASE_ADMIN_KEY not set — skipping Supabase upsert."
fi

# Git: create branch, commit ssg-pages, push & PR (optional)
if [ "$GIT_PUSH" = "true" ]; then
  echo
  echo "Creating git branch $BRANCH and committing $SSG_DIR ..."
  git fetch "$REPO_REMOTE" || true
  git checkout -b "$BRANCH"
  git add "$SSG_DIR"
  git commit -m "$COMMIT_MSG" || echo "No changes to commit"
  git push -u "$REPO_REMOTE" "$BRANCH"
  if command -v gh >/dev/null 2>&1 && gh auth status >/dev/null 2>&1; then
    gh pr create --title "$PR_TITLE" --body "$PR_BODY" --base main --head "$BRANCH" --web || true
    echo "PR created (or open web UI)."
  else
    echo "gh CLI missing or not authenticated; create PR manually for branch $BRANCH."
  fi
else
  echo "GIT_PUSH=false — skipping git commit / push / PR creation."
fi

# Run build pipeline if present
echo
echo "Running build pipeline: $BUILD_CMD"
set +e
eval "$BUILD_CMD"
BUILD_RC=$?
set -e
if [ "$BUILD_RC" -ne 0 ]; then
  echo "Build failed (rc=$BUILD_RC). Inspect logs and re-run: $BUILD_CMD"
else
  echo "Build completed successfully."
fi

# If prerender folder generation step exists, run it (common script name: npm run prerender or node scripts/prerender.js)
if command -v npm >/dev/null 2>&1; then
  if npm run | grep -q "prerender"; then
    echo "Running npm run prerender ..."
    npm run prerender || echo "prerender command failed or not configured."
  fi
fi

# Run parity verification script if present (this is the rigorous check)
if [ -f "scripts/verify_prerender_parity.sh" ]; then
  echo "Running scripts/verify_prerender_parity.sh ..."
  bash scripts/verify_prerender_parity.sh || echo "Parity check reported issues - inspect above."
else
  echo "No parity verification script found in scripts/ - you can run the verifier we used earlier."
fi

# Summary
echo
echo "=== DONE ==="
echo "Pages created: $PAGES_CREATED"
echo "Supabase upserts succeeded: $POSTED_UPSERT (failed: $FAILED_UPSERT)"
if [ "$GIT_PUSH" = "true" ]; then
  echo "Branch pushed: $BRANCH"
  if command -v gh >/dev/null 2>&1; then
    echo "Open PR: $(gh pr view --repo $(git remote get-url "$REPO_REMOTE" | sed -n 's#.*github.com[:/]\(.*\)\.git#\1#p') --json url --jq '.url' 2>/dev/null || echo 'PR created - check GitHub')"
  fi
fi
echo
echo "Next recommended actions:"
echo " - Review PR / run CI"
echo " - Merge & deploy to production"
echo " - Monitor GSC and run AEO citation checks weekly"
echo